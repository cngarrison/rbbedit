#!/bin/sh
# 
# Created by: Charlie Garrison <garrison@zeta.org.au>
# Copyright:  Copyright (c) 2014 Charlie Garrison
#             All Rights Reserved.
# Created on: 2014-09-01
#    Purpose: Script to edit local files on remote workstation using BBEdit
#-----------------------------------------------------------------------
# v0.1 Requires ExpanDrive for remote volume mounting
# v0.2 Parse ARGS using getopts
# v0.3 Multiple copy methods supported, absolute or relative paths, better error handling
# v0.4 Better support for `sh` on different platforms
# v0.5 Command option to send or get SSH keys to/from BBEdit workstation
# v0.6 Installer script and command option to self-update script
# v0.7 Add 'ftp' as a copy method
# v0.8 Command option to set path to `bbedit`; default changed to /usr/local/bin/bbedit
#-----------------------------------------------------------------------

bbedit_ssh_user=""
bbedit_ssh_host=""
bbedit_ssh_port=""
local_ssh_copy_id_command="ssh-copy-id"
bbedit_ssh_copy_id_command="/usr/local/bin/ssh-copy-id"
copy_method="sftp" # scp | expan | rsync | sftp | ftp
ftp_absolute=0
expan_volume=""
bbedit_wait_args=" --wait --resume"
bbedit_wait="$bbedit_wait_args"
bbedit_prog="/usr/local/bin/bbedit"
local_key_identity=""
bbedit_key_identity=""
yes_agree=""
verbose=0
self_update=0  #don't set this to true in ~/.rbbedit, really, just don't

# get user defaults, can set user defaults for any of the above settings
if [ -r ~/.rbbedit ] ; then
   . ~/.rbbedit
fi

# Check that at least one argument was specified
if [ $# -lt 1 ] ; then
   echo "You must specify at least 1 file name or option."
   exit 1
fi

while getopts u:h:p:m:x:k:i:y:wWv+? opt
do case "$opt" in
   u) bbedit_ssh_user="$OPTARG";;
   h) bbedit_ssh_host="$OPTARG";;
   p) bbedit_ssh_port="$OPTARG";;
   m) copy_method="$OPTARG";;
   x) expan_volume="$OPTARG"
      copy_method="expan";;
   k) key_copy="$OPTARG";;
   i) local_key_identity="$OPTARG"
      bbedit_key_identity="$OPTARG";;
   w) bbedit_wait="$bbedit_wait_args";;
   W) bbedit_wait="";;
   b) bbedit_prog="$OPTARG";;
   v) verbose=1;;
   y) yes_agree="$OPTARG";;
  \+) self_update=1;;
  \?) echo >&2 "Usage: $0 [-u ssh-user] [-h ssh-host | ssh-user@ssh-host] [-p ssh-port] [-m copy-method (sftp | ftp | expan | scp | rsync)] [-x expan-volume] [-w|W] file ..."
      echo >&2 "       $0 [-u ssh-user] [-h ssh-host | ssh-user@ssh-host] [-p ssh-port] [-k copy-direction (get | send)] [-i identity-file] [-y understood] file ..."
      exit 1;;
   esac
done

shift_args=$(( $OPTIND-1 ))
shift $shift_args
edit_files=$@


if [ $self_update -gt 0 ] ; then
   echo "Script will update itself using the installer at https://github.com/cngarrison/rbbedit"

   # Write update script
   cat > update.sh << EOF
#!/bin/bash
echo "Performing self-update..."
# Use 'curl' to download installer and pipe to 'sh'
export RBBEDIT_INSTALL_PATH="$0"
EOF
   if [ $verbose -gt 0 ] ; then
      echo "curl -L --insecure -o - https://raw.githubusercontent.com/cngarrison/rbbedit/master/install.sh | sh" >> update.sh
   else
      echo "curl -L --insecure -o - https://raw.githubusercontent.com/cngarrison/rbbedit/master/install.sh 2>/dev/null | sh" >> update.sh
   fi
   cat >> update.sh << EOF
echo "Done."
rm \$0
EOF

   echo "Inserting update process..."
   exec /bin/bash update.sh

   exit 0;
fi

# Check that we have copy method
if [ -z "$copy_method" ] ; then
   echo "You must specify a copy method."
   exit 1
fi

# Set bbedit_ssh_host from SSH_CLIENT if not set already
if [ -z "$bbedit_ssh_host" ] ; then
   bbedit_ssh_host=`echo $SSH_CLIENT | awk '{ print $1}'`
fi
# Set bbedit_ssh_host from `who` if still not set
if [ -z "$bbedit_ssh_host" ] ; then
   bbedit_ssh_host=`who -m | awk 'NR==1{ print $5}' | sed 's/[()]//g'`
fi

# Check that we have ssh host
if [ -z "$bbedit_ssh_host" ] ; then
   echo "You must specify a hostname."
   exit 1
fi

# Add bbedit_ssh_user (if set) to bbedit_ssh_host 
if [ ! -z "$bbedit_ssh_user" ] ; then
   bbedit_ssh_host="$bbedit_ssh_user@$bbedit_ssh_host"
fi


bbedit_ssh_port_arg=""
# Check whether we have ssh port
if [ ! -z "$bbedit_ssh_port" ] ; then
   bbedit_ssh_port_arg="-p $bbedit_ssh_port"
fi

# scp and rsync methods require bbedit_wait
if [ $copy_method = "scp" -o $copy_method = "rsync" ] ; then
   # if bbedit_wait is already set, then keep supplied value
   # otherwise set to default wait args
   if [ -z "$bbedit_wait" ] ; then
      bbedit_wait="$bbedit_wait_args"
   fi
fi

bbedit_command="$bbedit_prog $bbedit_wait"
bbedit_ssh_command="ssh $bbedit_ssh_port_arg $bbedit_ssh_host "

# Add bbedit_ssh_user (if set) to bbedit_ssh_host 
if [ ! -z "$key_copy" ] ; then
   if [ "$yes_agree" != 'understood' ] ; then
         echo "Please be aware of the implications of copying SSH public keys. Read the README at https://github.com/cngarrison/rbbedit"
#          echo "You must give your undestanding of the implications of copying SSH public keys. Read the README at https://github.com/cngarrison/rbbedit"
#          exit 1
   fi

   ssh_copy_id_command=""
   if [ $key_copy = "send" -o $key_copy = "put" ]; then
   
      key_identity_arg=""
      if [ ! -z "$local_key_identity" ] ; then
         key_identity_arg="-i $local_key_identity"
      fi

      if [ ! -z "$bbedit_ssh_port_arg" ] ; then
         ssh_copy_id_command="$local_ssh_copy_id_command $key_identity_arg $bbedit_ssh_host $bbedit_ssh_port_arg"
      else
         ssh_copy_id_command="$local_ssh_copy_id_command $key_identity_arg $bbedit_ssh_host"
      fi

      if [ $verbose -gt 0 ] ; then
         echo "Key Copy Direction: $key_copy"
         echo "Local Key Identity: $local_key_identity"
         echo "ssh-copy-id command: $ssh_copy_id_command"
      fi

      if ${ssh_copy_id_command}; then
         echo "Key copied. Be sure to check contents of ~/.ssh/authorized_keys on BBEdit workstation."
         exit 0
      else
         echo "Unknown error copying key"
         exit 1
      fi


   elif [ $key_copy = "get" ]; then
   
      key_identity_arg=""
      if [ ! -z "$bbedit_key_identity" ] ; then
         key_identity_arg="-i $bbedit_key_identity"
      fi

      if [ -z "$HOSTNAME" ] ; then
         HOSTNAME=`hostname`
      fi

      ssh_copy_id_command="$bbedit_ssh_command $bbedit_ssh_copy_id_command $key_identity_arg $USER@$HOSTNAME"

      if [ $verbose -gt 0 ] ; then
         echo "Key Copy Direction: $key_copy"
         echo "Workstation Key Identity: $bbedit_key_identity"
         echo "ssh-copy-id command: $ssh_copy_id_command"
      fi

      if ${ssh_copy_id_command}; then
         echo "Key copied. Be sure to check contents of local ~/.ssh/authorized_keys on server host."
         exit 0
      else
         echo "Unknown error copying key, trying fallback method"

         if [ -z "$bbedit_key_identity" ] ; then
            bbedit_key_identity="~/.ssh/id_rsa.pub"
         fi
         ssh_copy_id_command="$bbedit_ssh_command cat $bbedit_key_identity"

         if [ $verbose -gt 0 ] ; then
            echo "Workstation Key Identity: $bbedit_key_identity"
            echo "ssh-copy-id command: $ssh_copy_id_command  >> ~/.ssh/authorized_keys"
         fi

         bbedit_ssh_key=`$ssh_copy_id_command`
         echo $bbedit_ssh_key >> ~/.ssh/authorized_keys
         
         if [ ! -z "$bbedit_ssh_key" ]; then
            echo "Key copied. Be sure to check contents of local ~/.ssh/authorized_keys on server host."
            exit 0
         else
            echo "Unknown error copying key"
            exit 1
         fi
      fi


   else
      echo "Unknown key copy direction: $key_copy - must be either 'send' or 'get'"
      exit 1
   
   fi
fi

if [ $verbose -gt 0 ] ; then
   echo "Method: $copy_method"
   echo "SSH Command: $bbedit_ssh_command"
   echo "BBEdit Command: $bbedit_command"
   echo "Files: $edit_files"
fi


if [ $copy_method = "expan" ]; then

   # Check that we have ssh host
   if [ -z "$expan_volume" ] ; then
      echo "You must specify an expandrive volume."
      exit 1
   fi
   if [ $verbose -gt 0 ] ; then
      echo "ExpanDrive Volume: $expan_volume"
   fi

   $bbedit_ssh_command /usr/local/bin/expan connect $expan_volume 2>/dev/null

   ## wait for volume mount to finish (HACK!!)
   sleep 3

   for i in $edit_files
   do
      abs_path=`readlink -n -f $i`

      if [ ! -r "$abs_path" ] ; then
         echo "File/dir not found, or is not readable: $abs_path"

      else
         if [ $verbose -gt 0 ] ; then
            echo "Editing file: $abs_path using /Volumes/$expan_volume/$abs_path"
         fi

         $bbedit_ssh_command $bbedit_command /Volumes/$expan_volume/$abs_path

     fi

   done

elif [ $copy_method = "sftp" ]; then

   for i in $edit_files
   do
      abs_path=`readlink -n -f $i`

      if [ ! -r "$abs_path" ] ; then
         echo "File/dir not found, or is not readable: $abs_path"

      else
         if [ -z "$HOSTNAME" ] ; then
            HOSTNAME=`hostname`
         fi

         if [ -d "$abs_path" ] ; then
            abs_path="$abs_path/"
         fi

         if [ $verbose -gt 0 ] ; then
            echo "Editing file: $abs_path using sftp://$USER@$HOSTNAME/$abs_path"
         fi

         $bbedit_ssh_command $bbedit_command "sftp://$USER@$HOSTNAME/$abs_path"
      fi

   done

elif [ $copy_method = "ftp" ]; then

   for i in $edit_files
   do
      abs_path=`readlink -n -f $i`

      if [ ! -r "$abs_path" ] ; then
         echo "File/dir not found, or is not readable: $abs_path"

      else
         if [ -z "$HOSTNAME" ] ; then
            HOSTNAME=`hostname`
         fi

         if [ -d "$abs_path" ] ; then
            abs_path="$abs_path/"
         fi

         if [ $ftp_absolute -eq 0 ]; then
            ## assume ftp server has chrooted to user's HOME dir
            ## so strip $HOME/ from beginning of path
            rel_path=${abs_path#$HOME/}
         else
            rel_path=$abs_path
         fi

         if [ $verbose -gt 0 ] ; then
            echo "Editing file: $abs_path using ftp://$USER@$HOSTNAME/$rel_path"
         fi

         $bbedit_ssh_command $bbedit_command "ftp://$USER@$HOSTNAME/$rel_path"
      fi

   done

elif [ $copy_method = "scp" ]; then

   bbedit_tmp_dir=`$bbedit_ssh_command echo '$TMPDIR'`
   #bbedit_tmp_dir=`$bbedit_ssh_command /usr/bin/getconf DARWIN_USER_CACHE_DIR`
   if [ $verbose -gt 0 ] ; then
      echo "TMP dir: $bbedit_tmp_dir"
   fi

   bbedit_scp_port_arg=""
   if [ ! -z "$bbedit_ssh_port" ] ; then
      bbedit_scp_port_arg="-P $bbedit_ssh_port"
   fi
   bbedit_scp_command="scp $bbedit_scp_port_arg -p -q"

   for i in $edit_files
   do
      abs_path=`readlink -n -f $i`
      filename=`basename $abs_path`

      ## it should be fine working with directories, but there is non-trivial risk when copying data back
      ## so let's only support editing of single files with this version
      if [ ! -f "$abs_path" -o ! -r "$abs_path" ] ; then
         echo "File not found, or is not readable: $abs_path"

      else
         if [ $verbose -gt 0 ] ; then
            echo "Editing file: $abs_path using $bbedit_tmp_dir/$filename"
         fi

         $bbedit_scp_command $abs_path $bbedit_ssh_host:$bbedit_tmp_dir/$filename

         $bbedit_ssh_command $bbedit_command $bbedit_tmp_dir/$filename

         $bbedit_scp_command $bbedit_ssh_host:$bbedit_tmp_dir/$filename $abs_path
      fi

   done

elif [ $copy_method = "rsync" ]; then
   
   bbedit_tmp_dir=`$bbedit_ssh_command echo '$TMPDIR'`
   #bbedit_tmp_dir=`$bbedit_ssh_command /usr/bin/getconf DARWIN_USER_CACHE_DIR`
   if [ $verbose -gt 0 ] ; then
      echo "TMP dir: $bbedit_tmp_dir"
   fi

   bbedit_rsync_port_arg=""
   if [ ! -z "$bbedit_ssh_port" ] ; then
      bbedit_rsync_port_arg="--port $bbedit_ssh_port"
   fi
   bbedit_rsync_command="rsync $bbedit_rsync_port_arg -pt -q --rsh=ssh"

   for i in $edit_files
   do
      abs_path=`readlink -n -f $i`
      filename=`basename $abs_path`

      ## it should be fine working with directories, but there is non-trivial risk when copying data back
      ## so let's only support editing of single files with this version
      if [ ! -f "$abs_path" -o ! -r "$abs_path" ] ; then
         echo "File not found, or is not readable: $abs_path"

      else
         if [ $verbose -gt 0 ] ; then
            echo "Editing file: $abs_path using $bbedit_tmp_dir/$filename"
         fi

         $bbedit_rsync_command $abs_path $bbedit_ssh_host:$bbedit_tmp_dir/$filename

         $bbedit_ssh_command $bbedit_command $bbedit_tmp_dir/$filename

         $bbedit_rsync_command $bbedit_ssh_host:$bbedit_tmp_dir/$filename $abs_path
      fi

   done

else
   echo "Unknown copy method: $copy_method"
   exit 1
   
fi


# Local Variables:
# tab-width: 3
# x-auto-expand-tabs: true
# End:
